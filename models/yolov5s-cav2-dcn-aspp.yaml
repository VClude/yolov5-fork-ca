# YOLOv5 ðŸš€ â€” YOLOv5s with P2 head + DCN neck for tiny, crowded scenes
# nc=1 (adjust if needed)

nc: 1
depth_multiple: 0.33
width_multiple: 0.50

# 4 detection levels: P2/4, P3/8, P4/16, P5/32
anchors:
  - [ 4,5,  6,8,  8,10 ]                 # P2/4   (very small)
  - [ 10,13, 16,30, 33,23 ]              # P3/8
  - [ 30,61, 62,45, 59,119 ]             # P4/16
  - [ 116,90, 156,198, 373,326 ]         # P5/32

# Backbone (v6-style; C3CA = C3 with coordinate attention, as in your fork)
backbone:
  # from, number, module, args
  - [ -1, 1, Conv,  [ 64, 6, 2, 2 ] ]    # 0-P1/2
  - [ -1, 1, Conv,  [ 128, 3, 2 ] ]      # 1-P2/4
  - [ -1, 3, C3,    [ 128 ] ]            # 2  <-- keep as clean P2 feature
  - [ -1, 1, Conv,  [ 256, 3, 2 ] ]      # 3-P3/8
  - [ -1, 6, C3,    [ 256 ] ]            # 4
  - [ -1, 1, Conv,  [ 512, 3, 2 ] ]      # 5-P4/16
  - [ -1, 9, C3,    [ 512 ] ]            # 6
  - [ -1, 1, Conv,  [ 1024, 3, 2 ] ]     # 7-P5/32
  - [ -1, 3, C3CA,  [ 1024 ] ]           # 8
  - [ -1, 1, SPPF,  [ 1024, 5 ] ]        # 9  (P5 out)

# Neck + Head (FPN+PAN with P2 output; DCN for laterals & downsamples)
head:
  # P5 -> P4
  - [ 9,  1, Conv,     [ 512, 1, 1 ] ]                 # 10 reduce P5
  - [ 10, 1, nn.Upsample, [ None, 2, "nearest" ] ]     # 11
  - [ 6,  1, DCNConv,  [ 512, 1, 1 ] ]                 # 12 lateral P4 (DCN)
  - [ [11, 12], 1, Concat, [ 1 ] ]                     # 13
  - [ -1, 3, C3CA,     [ 512, False ] ]                # 14 P4 td

  # P4 -> P3
  - [ 14, 1, DCNConv,  [ 256, 1, 1 ] ]                 # 15 reduce
  - [ 15, 1, nn.Upsample, [ None, 2, "nearest" ] ]     # 16
  - [ 4,  1, DCNConv,  [ 256, 1, 1 ] ]                 # 17 lateral P3 (DCN)
  - [ [16, 17], 1, Concat, [ 1 ] ]                     # 18
  - [ -1, 3, C3CA,     [ 256, False ] ]                # 19 P3 td

  # P3 -> P2
  - [ 19, 1, DCNConv,  [ 128, 1, 1 ] ]                 # 20 reduce
  - [ 20, 1, nn.Upsample, [ None, 2, "nearest" ] ]     # 21
  - [ 2,  1, DCNConv,  [ 128, 1, 1 ] ]                 # 22 lateral P2 (DCN)
  - [ [21, 22], 1, Concat, [ 1 ] ]                     # 23
  - [ -1, 3, C3CA,     [ 128, False ] ]                # 24 P2 td

  # >>> ASPP on P2 (new)
  - [ 24, 1, ASPP,     [ 128 ] ]                       # 25 P2-ASPP

  # Bottom-up PAN starts from ASPP output
  - [ 25, 1, DCNConv,  [ 128, 3, 2 ] ]                 # 26 down P2->P3 (DCN)
  - [ [26, 19], 1, Concat, [ 1 ] ]                     # 27
  - [ -1, 3, C3CA,     [ 256, False ] ]                # 28 P3 bu

  - [ 28, 1, DCNConv,  [ 256, 3, 2 ] ]                 # 29 down P3->P4 (DCN)
  - [ [29, 14], 1, Concat, [ 1 ] ]                     # 30
  - [ -1, 3, C3CA,     [ 512, False ] ]                # 31 P4 bu

  - [ 31, 1, DCNConv,  [ 512, 3, 2 ] ]                 # 32 down P4->P5 (DCN)
  - [ [32, 10], 1, Concat, [ 1 ] ]                     # 33
  - [ -1, 3, C3CA,     [ 1024, False ] ]               # 34 P5 bu

  # Detect: use P2-ASPP instead of raw P2 td
  - [ [25, 28, 31, 34], 1, Detect, [ nc, anchors ] ]   # P2, P3, P4, P5
